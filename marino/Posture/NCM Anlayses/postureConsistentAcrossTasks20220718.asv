clear; clc; clf; close all;

%% Setup saveFig   
    saveFig = false;
    saveDir = 'C:\Users\pmari\OneDrive - University of Pittsburgh\Documents\Posture\Conferences\NCM 2022\Figures\Consistent Posture Signal';
    set(0, 'DefaultFigureRenderer', 'painters');
    fs = 14;
    
%% Setup colormap    
    load('C:\Users\pmari\OneDrive - University of Pittsburgh\Documents\Matlab Repository\marino\Palettes\orli.mat')
    pcmap = orli;
    
%% Load Data, subselect
    dataset = 'E20200314';
    [Data,zScoreParams] = loadData(dataset);
    
    %Get trajStruct
    binWidth = 25; kernelStdDev = 25;
    trialInclStates = struct('trialName','','inclStates',[]);
    trajFields = {'zSmoothFR','markerVel','marker'};
    condFields = {{'task','conditionData','taskID'},{'target','targetData','targetID'},{'posture','conditionData','postureID'}};
    
    trialInclStates(1).trialName = {'GridTask_BC_ForceBar'};
        trialInclStates(1).inclStates = {{'state','Step 1 Freeze','first',25},{'state','Step 2','first',0}};
    trialInclStates(2).trialName = {'HC_CenterOut_ForceBar_20200314'};
        trialInclStates(2).inclStates = {{'kin','moveOnsetTime','first',-300},{'kin','moveOnsetTime','first',-50}};
    trialInclStates(3).trialName = {'IsometricForce_1D'};
        trialInclStates(3).inclStates = {{'state','Target','first',75},{'state','Target','first',200}};
    trajStruct = getTrajStruct20220419(Data,condFields,trajFields,trialInclStates,binWidth,kernelStdDev,'matchConditions',false,'zScoreParams',zScoreParams);

    taskIDs = struct('ID',[],'task','');
    taskIDs(1).ID = 1; taskIDs(1).task = 'BC';
    taskIDs(2).ID = 2; taskIDs(2).task = 'HC';
    taskIDs(3).ID = 3; taskIDs(3).task = 'Iso';
    taskIDs(4).ID = 4; taskIDs(4).task = 'All';
    
%% For each timecourse in trajstruct, get single point
    for i = 1:size(trajStruct,2)
        %Individual trials
        for j = 1:size(trajStruct(i).allSmoothFR,2)
           trajStruct(i).allSmoothFR(j).obs = mean(trajStruct(i).allSmoothFR(j).traj); 
        end
        %Condition average
        trajStruct(i).avgSmoothFR.condAvg = mean(trajStruct(i).avgSmoothFR.traj);
    end

%% Reduce dimensionality of observations 
    allObs = [];
    for i = 1:size(trajStruct,2)
        for j = 1:size(trajStruct(i).allSmoothFR,2)
            obs = tempTrajStruct(i).allSmoothFR(j).obs;
            allObs = vertcat(allObs,obs);
        end
    end
    
    
%% Get posture list
    postureList = unique([trajStruct.posture]);

%% Do LDA by posture on trial averages from each task and from all tasks
    ldaStruct = struct('task',[],'postureLDA',[]);
    ldaStructInd = 1;
    for task = 1:4
    	obsStruct = struct('label',[],'numObs',[],'allObs',[]);
        structInd = 1; 
        for posture = postureList
            obsStruct(structInd).label = posture;
            allObs = [];
            if task == 4
                tempTrajStruct = trajStruct([trajStruct.posture]==posture);
            else
                tempTrajStruct = trajStruct([trajStruct.task]==task & [trajStruct.posture]==posture);
            end
            for i = 1:size(tempTrajStruct,2)
                for j = 1:size(tempTrajStruct(i).allSmoothFR,2)
                    obs = tempTrajStruct(i).allSmoothFR(j).obs;
                    allObs = vertcat(allObs,obs);
                end
            end
            obsStruct(structInd).allObs = allObs;
            obsStruct(structInd).numObs = size(obsStruct(structInd).allObs,1);
            structInd = structInd + 1;
        end
        [postureLDA] = doLDA(obsStruct);
        ldaStruct(ldaStructInd).task = task; 
        ldaStruct(ldaStructInd).postureLDA = postureLDA; 
        ldaStructInd = ldaStructInd + 1;
    end
    
    
%% 4x4 visualization of results
    f = figure;
    f.Position = [10 10 1000 500];
    for trainTask = 1:4
        for testTask = 1:4
            subplot(4,4,(trainTask-1)*4+testTask)
            hold on
            for posture = postureList
                allObs = [];
                if testTask == 4
                    tempTrajStruct = trajStruct([trajStruct.posture]==posture);
                else
                    tempTrajStruct = trajStruct([trajStruct.task]==testTask & [trajStruct.posture]==posture);
                end
                for i = 1:size(tempTrajStruct,2)
                    allObs = vertcat(allObs,tempTrajStruct(i).allSmoothFR.obs);
                end
                postureLDA = ldaStruct(trainTask).postureLDA;
                ldaProj = allObs*postureLDA;
                plot(ldaProj(:,1),ldaProj(:,2),'.','MarkerSize',10,'Color',pcmap(posture,:));
            end
            if trainTask == 1
               title(taskIDs(testTask).task) 
            end
            if testTask == 1
               ylabel(taskIDs(trainTask).task) 
            end
        end
    end
    sgtitle('Train Task')
    
%% Create obsStruct for across task classification
%     %Get mininum number of trials for task*posture condition
%     minNumCondObs = zeros(1,3);
%     numCond = zeros(1,3);
%     numPossibleObsToUse = zeros(1,3);
%     for task = 1:3
%         tempMinNumCondObs = 999999999;
%         tempTrajStruct = trajStruct([trajStruct.task]==task);
%         for i = 1:size(tempTrajStruct,2)
%             numCondObs = size(vertcat(tempTrajStruct(i).allSmoothFR.obs),1);
%             if numCondObs < tempMinNumCondObs
%                 tempMinNumCondObs = numCondObs;
%             end
%         end
%         minNumCondObs(task) = tempMinNumCondObs;
%         numCond(task) = size(tempTrajStruct,2);
%         numPossibleObsToUse(task) = minNumCondObs(task)*numCond(task);
%     end
%     
%     numObsToUse = min(numPossibleObsToUse);
      
                                             
    %Create obsStruct using that number of samples
    taskObsStruct = struct('task',[],'obs',[],'labels',[]);
    structInd = 1;
    for task = 1:4
       if task == 4
           tempTrajStruct = trajStruct;
       else
           tempTrajStruct = trajStruct([trajStruct.task]==task);
       end
       %numCond = size(tempTrajStruct,2);
       %numObsPerCond = floor(numObsToUse/numCond);
       obs = [];
       labels = [];
       for i = 1:size(tempTrajStruct,2)
            condObs = vertcat(tempTrajStruct(i).allSmoothFR.obs);
            %obs = vertcat(obs,datasample(condObs,numObsPerCond,'Replace',false));
            obs = vertcat(obs,condObs);
            posture = tempTrajStruct(i).posture;
            %labels = vertcat(labels,ones(numObsPerCond,1)*posture);
            labels = vertcat(labels,ones(size(condObs,1),1)*posture);
       end
       taskObsStruct(structInd).task = task;
       taskObsStruct(structInd).obs = obs;
       taskObsStruct(structInd).labels = labels;
       structInd = structInd + 1;
    end
    
%     %Trim down to minNumObs
%     minNumObs = 999999999;
%     for i = 1:size(taskObsStruct,2)
%         numObs = size(taskObsStruct(i).obs,1);
%         if numObs < minNumObs
%             minNumObs = numObs;
%         end
%     end
%     
%     for i = 1:size(taskObsStruct,2)
%        taskObsStruct(i).obs = taskObsStruct(i).obs(1:minNumObs,:);
%        taskObsStruct(i).labels = taskObsStruct(i).labels(1:minNumObs,:);
%     end

%% Train on individual tasks, classify across tasks (cross-validated)
    resultStruct = struct('trainTask',[],'testTask',[],'pctCorrect',[]);
    structInd = 1;
    numFolds = 5;
    for trainTask = 1:4
        for testTask = 1:4
            resultStruct(structInd).trainTask = trainTask;
            resultStruct(structInd).testTask = testTask;
            resultStruct(structInd).pctCorrect = zeros(1,numFolds);
            structInd = structInd + 1;
        end
    end
       
    c = cvpartition(minNumObs,'KFold',numFolds);
    for fold = 1:numFolds
        trainIdx = training(c,fold);
        testIdx = test(c,fold);
        %Train model on trainTask
        for trainTask = 1:4
           obs = taskObsStruct([taskObsStruct.task]==trainTask).obs;
           labels = taskObsStruct([taskObsStruct.task]==trainTask).labels;
           %[LDAModel,numClasses] = LDATrainModel(obs(trainIdx,:),labels(trainIdx,1));
           [NBModel,numClasses] = NBTrainModel(obs(trainIdx,:),labels(trainIdx,1));
           %Test model on testTask
           for testTask = 1:4
                obs = taskObsStruct([taskObsStruct.task]==testTask).obs;
                labels = taskObsStruct([taskObsStruct.task]==testTask).labels;
                %[predictedLabels,foldPctCorrect] = LDAClassify(obs,labels,numClasses,LDAModel);
                [predictedLabels,foldPctCorrect] = NBClassify(obs,labels,numClasses,NBModel);
                resultStruct([resultStruct.trainTask]==trainTask & [resultStruct.testTask]==testTask).pctCorrect(fold) = foldPctCorrect;
           end
        end
    end
    
    
%% Plot performance
    figure
    hold on
    xticklabelcell = cell(1,size(resultStruct,2));
    for i = 1:size(resultStruct,2)
       pctCorrect = resultStruct(i).pctCorrect; 
       plot(i,pctCorrect,'.','MarkerSize',10,'Color','b')
       plot(i,mean(pctCorrect),'.','MarkerSize',15,'Color','k')
       trainTask = resultStruct(i).trainTask;
       testTask = resultStruct(i).testTask;
       xticklabelcell{1,i} = ['Train: ',taskIDs(trainTask).task,' Test: ',taskIDs(testTask).task];
    end
    
    ax = gca;
    xLim = ax.XLim;
    plot(xLim,[100/3 100/3],'--','Color','r')
    ax.YLim = [0,100];
    ylabel('% Correct')
    xticks([1:16])
    xticklabels(xticklabelcell)
    xtickangle(90)
    

    
%% Local function for performing LDA
     function [LDAproj] = doLDA(obsStruct)
        %Preallocate
        minNumObs = min([obsStruct.numObs]);
        numClasses = size(obsStruct,2);
        numDims = size(obsStruct(1).allObs,2);
        obs = NaN(minNumObs*numClasses,numDims); labels =  NaN(minNumObs*numClasses,1); 
        %Fill
        k = 1;
        for i = 1:size(obsStruct,2)
            totalClassObs = size(obsStruct(i).allObs,1);
            obs(k:k+minNumObs-1,:) = obsStruct(i).allObs(randsample(totalClassObs,minNumObs),:);
            labels(k:k+minNumObs-1,1) = ones(minNumObs,1).*obsStruct(i).label;
            k = k+minNumObs;
        end
        LDAproj = fisherLDA(obs, labels);
        [LDAproj,~] = qr(LDAproj);
        LDAproj = LDAproj(:,1:numClasses-1);
     end  